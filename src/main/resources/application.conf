InTouch {
  host="0.0.0.0"
  port=9090
  realm=In Touch
  cert {
    password = T4nxPncuHX
    file = localhost.p12
  }

  services = [
    {
      id=vsChallenge
      version=v1
      type=db
      url="jdbc:mysql://mysqlvs:3306/vs_challenge?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true"
      driverClassName="com.mysql.cj.jdbc.Driver"
      user=root
      password=rootroot
      validationQuery="SELECT 1"
      maxOpenConnections=5
    }
  ]

  vsChallenge {
    entities = [
      {
        id=events
        version=1
        type=GET
        query=["select * from vs_challenge.events"]
        roles = ["DBSERV1"]
      }
      {
        id=tickets
        version=1
        type=GET
        query=["select * from vs_challenge.tickets"]
        roles = ["DBSERV1"]
      }
      {
        id=ticketsByEvent
        version=1
        type=GET
        query=["select e.name, e.description, e.location, e.city, e.state, e.country, e.type, e.date, t.ticket_id, t.section, ",
          "t.`row`, t.price, t.quantity - IFNULL(i.issued,0)  as availables from vs_challenge.tickets t join vs_challenge.events e on t.event_id=e.event_id left join ",
          "(select ticket_id, count(*)  as issued from vs_challenge.issued_tickets where status in ('BLOCKED', 'ISSUED') group by ticket_id) i on i.ticket_id = t.ticket_id where t.event_id = ${urlParam0} and t.quantity > 0"]
        roles = ["DBSERV1"]
      }
      {
        id=ticketsBySeller
        version=1
        type=GET
        query=["select e.name, e.description, e.location, e.city, e.state, e.country, e.type, e.date, t.ticket_id, t.section, ",
          "t.`row`, t.price, t.quantity - IFNULL(i.issued,0)  as availables from vs_challenge.tickets t join vs_challenge.events e on t.event_id=e.event_id left join ",
          "(select ticket_id, count(*)  as issued from vs_challenge.issued_tickets where status in ('BLOCKED', 'ISSUED') group by ticket_id) i on i.ticket_id = t.ticket_id where t.seller_id = ${urlParam0} and t.quantity > 0"]
        roles = ["DBSERV1"]
      }
      {
        id=ticketsByEvent
        version=1
        type=POST
        query=["INSERT INTO vs_challenge.tickets (`event_id`, `seller_id`, `section`, `row`, `quantity`, `price`) VALUES (${urlParam0}, ${seller_id}, ${section}, ${row}, ${quantity}, ${price})"]
        roles = ["DBSERV1"]
      }
      {
        id=blockTicket
        version=1
        type=POST
        query=["INSERT INTO `vs_challenge`.`issued_tickets` (`ticket_id`, `customer_id`, `token`, `status`, `session_id`) ",
          "VALUES (${urlParam0}, ${customer_id}, ${token}, 'BLOCKED', ${urlParam1})"]
        roles = ["DBSERV1"]
      }
      {
        id=issueTicket
        version=1
        type=PUT
        query=["UPDATE `vs_challenge`.`issued_tickets` SET status = 'ISSUED', payment_tx_id = ${paymentTxId} WHERE session_id = ${urlParam0} and customer_id = ${urlParam1} "]
        roles = ["DBSERV1"]
      }
      {
        id=bestSeat
        version=1
        type=GET
        query=["select e.name, e.description, e.location, e.city, e.state, e.country, e.type, e.date, t.*, s.seat_score as score from ",
          "vs_challenge.tickets t join vs_challenge.events e on t.event_id=e.event_id ",
          "join vs_challenge.seat_value s on s.event_id = t.event_id and s.section = t.section and s.`row` = t.`row` ",
          "where t.event_id = ${urlParam0} and t.quantity > 0 order by s.seat_score asc"]
        roles = ["DBSERV1"]
      }
      {
        id=bestValue
        version=1
        type=GET
        query=["select e.name, e.description, e.location, e.city, e.state, e.country, e.type, e.date, t.*, s.seat_score * price as score from ",
          "vs_challenge.tickets t join vs_challenge.events e on t.event_id=e.event_id ",
          "join vs_challenge.seat_value s on s.event_id = t.event_id and s.section = t.section and s.`row` = t.`row` ",
          "where t.event_id = ${urlParam0} and t.quantity > 0 order by s.seat_score * price asc"]
        roles = ["DBSERV1"]
      }
    ]
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = WARNING
  stdout-loglevel = "WARNING"
  log-config-on-start = off
  lifecycle = off
  fsm = off

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 9090

      bind-hostname = 127.0.0.1
      port = 9000
    }
  }
}

